<?php
// $Id$

/**
 * Implementation of hook_requirements().
 */
function xmlsitemap_node_requirements($phase) {
  $t = get_t();
  $requirements = array();
  if (in_array($GLOBALS['db_type'], array('mysql', 'mysqli')) && version_compare(db_version(), '4.0.14') < 0) {
    $requirements['xmlsitemap_node_sql'] = array(
      'title' => $t('XML Sitemap: Node'),
      'value' => $t('Your MySQL version is too low. &ldquo;XML Sitemap: Node&rdquo; requires MySQL 4.0.14 or higher.'),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_node_install() {           
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {xmlsitemap_node} (
        nid int,
        pid int,
        last_changed int(11),
        previously_changed int(11),
        last_comment int(11),
        previous_comment int(11),
        priority_override float,
        PRIMARY KEY (nid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      db_query("CREATE TABLE {xmlsitemap_node} (
        nid integer,
        pid integer,
        last_changed integer,
        previously_changed integer,
        last_comment integer,
        previous_comment integer,
        priority_override real,
        PRIMARY KEY (nid)
      );");
      break;
  }
}

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_node_enable() {
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'pathauto'"));
  if ($weight !== FALSE) {
    db_query("UPDATE {system} SET weight = %d WHERE type = 'module' AND name = 'xmlsitemap_node'", ++$weight);
  }
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("
        UPDATE {xmlsitemap_node} xn INNER JOIN {node} n ON xn.nid = n.nid LEFT JOIN {node_comment_statistics} s ON s.nid = xn.nid
        SET xn.previously_changed = xn.last_changed, xn.last_changed = n.changed, xn.last_comment = s.last_comment_timestamp
        WHERE xn.nid = n.nid AND (xn.last_changed <> n.changed OR xn.last_comment <> s.last_comment_timestamp)
      ");
      break;
    case 'pgsql':
      db_query("
        UPDATE {xmlsitemap_node} SET previously_changed = last_changed, last_changed = {node}.changed, last_comment = {node_comment_statistics}.last_comment_timestamp
        FROM {node} LEFT JOIN {node_comment_statistics} ON {node_comment_statistics}.nid = {node}.nid
        WHERE {xmlsitemap_node}.nid = {node}.nid AND (last_changed <> {node}.changed OR last_comment <> {node_comment_statistics}.last_comment_timestamp)
      ");
      break;
  }
  db_query("
    INSERT INTO {xmlsitemap_node} (nid, last_changed, last_comment, previous_comment)
    SELECT n.nid, n.changed, s.last_comment_timestamp, MAX(c.timestamp) FROM {node} n
    LEFT JOIN {node_comment_statistics} s ON s.nid = n.nid
    LEFT OUTER JOIN {comments} c ON c.nid = n.nid AND c.timestamp < s.last_comment_timestamp
    LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
    WHERE xn.nid IS NULL
    GROUP BY n.nid, n.changed, s.last_comment_timestamp
  ");
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("
        UPDATE {xmlsitemap_node} xn INNER JOIN {url_alias} ua
        ON ua.src = CONCAT('node/', CAST(xn.nid AS CHAR))
        SET xn.pid = ua.pid
        WHERE xn.pid IS NULL
      ");
      break;
    case 'pgsql':
      db_query("
        UPDATE {xmlsitemap_node}
        SET pid = {url_alias}.pid
        FROM {url_alias}
        WHERE {url_alias}.src = CONCAT('node/', CAST(nid AS VARCHAR)) AND {xmlsitemap_node}.pid IS NULL
      ");
      break;
  }
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_disable().
 */
function xmlsitemap_node_disable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_node_uninstall() {
  db_query("DROP TABLE {xmlsitemap_node}");
  $settings = db_query("SELECT name FROM {variable} WHERE name LIKE 'xmlsitemap\_node\_%'");
  while ($variable = db_fetch_array($settings)) {
    variable_del($variable->name);
  }
}

