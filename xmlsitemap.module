<?php
// $Id$

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
   */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  if (variable_get('xmlsitemap_cron_submit', FALSE) && variable_get('xmlsitemap_changed', FALSE)) {
    if (variable_get('xmlsitemap_update', FALSE)) {
      _xmlsitemap_update();
    }
    _xmlsitemap_ping();
  }
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_exit() {
  if (variable_get('xmlsitemap_log_access', FALSE)) {
    $items = array();
    $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
    $link_count = _xmlsitemap_link_count();
    if ($link_count / $chunk_size > 1) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items["sitemap$chunk.xml"] = $chunk;
      }
    }
    drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
    if (in_array(arg(0), $items) && is_null(arg(1))) {
      $chunk = $items[arg(0)];
      if ($chunk < $link_count / $chunk_size) {
        $write_log = TRUE;
      }
    }
    elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
      $write_log = TRUE;
    }
    if (isset($write_log)) {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      $message = array_shift(module_invoke_all('xmlsitemap_engines', 'access'));
      if (!isset($message)) {
        $message = 'Sitemap downloaded by @user-agent at @address.';
      }
      watchdog('xmlsitemap', t($message,
        array(
          '@user-agent' => $_SERVER['HTTP_USER_AGENT'],
          '@address' => $_SERVER['REMOTE_ADDR'],
        )
      ));
    }
  }
  if (!isset($write_log)) {
    if (_xmlsitemap_submit_on_exit()) {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      _xmlsitemap_update();
      _xmlsitemap_ping();
    }
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($section) {
  switch ($section) {
    case 'admin/settings/xmlsitemap':
    case 'admin/settings/xmlsitemap/settings':
      $output = t('Configure the site map.');
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output = t('Configure the behavior for search engines.');
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML Sitemap automatically creates a site map that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $function = $module .'_xmlsitemap_description';
        $optional .= $function();
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML Sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu($may_cache) {
  $items = array();
  $access_config = user_access('administer site configuration');
  $access_content = user_access('access content');
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/xmlsitemap',
      'title' => t('XML Sitemap'),
      'description' => t('Configure the XML site map.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('xmlsitemap_settings_sitemap'),
      'access' => $access_config,
    );
    $items[] = array(
      'path' => 'admin/settings/xmlsitemap/sitemap',
      'title' => t('Site map'),
      'description' => t('Configure the site map.'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1,
    );
    $items[] = array(
      'path' => 'admin/settings/xmlsitemap/engines',
      'title' => t('Search engines'),
      'description' => t('Configure the submission settings for the XML site map to the search engines.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('xmlsitemap_settings_engines'),
      'type' => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path' => 'sitemap.xml',
      'title' => t('Site map index'),
      'callback' => 'xmlsitemap_output',
      'type' => MENU_CALLBACK,
      'access' => $access_content,
    );
  }
  else {
    $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
    $link_count = _xmlsitemap_link_count();
    if ($link_count / $chunk_size > 1) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items[] = array(
          'path' => "sitemap$chunk.xml",
          'title' => t('Site map !number', array('!number' => $chunk)),
          'callback' => 'xmlsitemap_output',
          'callback arguments' => array($chunk),
          'type' => MENU_CALLBACK,
          'access' => $access_content,
        );
      }
    }
  }
  return $items;
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Menu callback; display the site map.
 * @param $chunk:
 * An integer specifying which chunk of the site map is being requested. If not
 * set and there is more than one chunk, display the site map index.
 * @return None
 */
function xmlsitemap_output($chunk = NULL) {
  if (variable_get('xmlsitemap_update', FALSE)) {
    _xmlsitemap_update();
  }
  drupal_set_header('Content-type: text/xml; charset=utf-8');
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  $link_count = _xmlsitemap_link_count();
  if (isset($chunk)) {
    if ($chunk < $link_count / $chunk_size) {
      _xmlsitemap_output_chunk($chunk);
    }
    else {
      drupal_not_found();
    }
  }
  else {
    if ($link_count > $chunk_size) {
      _xmlsitemap_output_index();
    }
    else {
      _xmlsitemap_output_chunk();
    }
  }
  drupal_page_footer();
  exit;
}

/**
 * Menu callback; return site map settings form.
 */
function xmlsitemap_settings_sitemap() {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
  );
  $form['general']['xmlsitemap_chunk_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Chunk size'),
    '#default_value' => variable_get('xmlsitemap_chunk_size', 50000),
    '#size' => 10,
    '#maxlength' => 5,
    '#description' => t('This is the number of links to include in one site map. Values can range between 1 and 50,000. If the total number of links exceeds the chunk size, multiple site maps will be generated.'),
  );
  $form['general']['priority'] = array(
    '#type' => 'fieldset',
    '#title' => t('Priority parameters'),
    '#collapsible' => TRUE,
  );
  $form['general']['priority']['xmlsitemap_front_page_priority'] = array(
    '#type' => 'select',
    '#title' => t('Front page priority'),
    '#description' => t('This is the absolute priority for the front page.'),
    '#default_value' => variable_get('xmlsitemap_front_page_priority', 1),
    '#options' => xmlsitemap_priority_options(),
  );
  return system_settings_form($form);
}

/**
 * Validate site map settings form.
 */
function xmlsitemap_settings_sitemap_validate($form_id, $form_values) {
  if ($form_values['xmlsitemap_chunk_size'] <= 0 || $form_values['xmlsitemap_chunk_size'] > 50000) {
    form_set_error('xmlsitemap_chunk_size', t('The number of links in a site map chunk must be a number between 1, and 50,000.'));
  }
}

/**
 * Submit site map settings form.
 */
function xmlsitemap_settings_sitemap_submit($form_id, $form_values) {
  system_settings_form_submit($form_id, $form_values);
  xmlsitemap_update_sitemap();
}

/**
 * Menu callback; return search engine settings form.
 */
function xmlsitemap_settings_engines() {
  $form['submission'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission settings'),
  );
  $form['submission']['xmlsitemap_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit the site map when updated'),
    '#default_value' => variable_get('xmlsitemap_submit', FALSE),
    '#description' => t('If enabled, the search engines will be notified of changes to the site map each time it is updated.'),
  );
  $form['submission']['xmlsitemap_cron_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit the site map on cron run'),
    '#default_value' => variable_get('xmlsitemap_cron_submit', FALSE),
    '#description' => t('If enabled, the search engines will be notified of changes to the site map each time cron is run.'),
  );
  $form['submission']['xmlsitemap_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log access'),
    '#default_value' => variable_get('xmlsitemap_log_access', FALSE),
    '#description' => t('If enabled, a watchdog entry will be made each time the site map is accessed, containing information about the requestor.'),
  );
  $form = array_merge($form, module_invoke_all('xmlsitemap_engines', 'form'));
  menu_rebuild();
  return system_settings_form($form);
}

/**
 * Submit search engine settings form.
 */
function xmlsitemap_settings_engines_submit($form_id, $form_values) {
  if ($form_values['xmlsitemap_root']) {
    $form_values['xmlsitemap_submit'] = FALSE;
    $form_values['xmlsitemap_log_access'] = FALSE;
  }
  system_settings_form_submit($form_id, $form_values);
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Add the XML site map settings fieldset to the form.
 * @param $form
 *  The form to change.
 * @param settings
 *  An array of optional settings.
 *   - disabled: TRUE if some of the fields added to the fieldsets are disabled;
 *   - weight: the weight of the fieldset;
 *   - buttons: an array of strings which identify the form items that will have
 *     their weight increased of of 1.
 */
function xmlsitemap_add_settings_fieldset(&$form, $settings = array()) {
  if (!isset($form['xmlsitemap'])) {
    $form['xmlsitemap'] = array(
      '#type' => 'fieldset',
      '#title' => t('XML site map'),
      '#collapsible' => TRUE,
    );
  }
  if (!empty($settings['disabled']) && !isset($form['xmlsitemap']['#description'])) {
    $form['xmlsitemap']['#description'] = t('The disabled options are only modifiable from users with the right permission');
  }
  if (isset($settings['weight'])) {
    if ((isset($form['xmlsitemap']['#weight']) && $settings['weight'] > $form['xmlsitemap']['#weight']) || !isset($form['xmlsitemap']['#weight'])) {
      $form['xmlsitemap']['#weight'] = $settings['weight'];
    }
  }
  if (!empty($settings['buttons'])) {
    foreach ($settings['buttons'] as $button) {
      if (isset($form[$button])) {
        $form[$button]['#weight'] = isset($form[$button]['#weight']) ? $form[$button]['#weight'] + 1 : 1;
      }
    }
  }
}

/**
 * Modified version of file_create_url(). Allows us to remove language prefixes.
 * @param $path: the path to the file
 * @return A URL to the file
 */
function xmlsitemap_file_create_url($path, $alias = NULL) {
  $path = trim(substr($path, strlen(file_directory_path())), '\\/');
  if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PRIVATE) {
    return xmlsitemap_url('system/files/'. $path, $alias, NULL, NULL, TRUE);
  }
  else {
    return "$GLOBALS[base_url]/". file_directory_path() .'/'. str_replace('\\', '/', $path);
  }
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if (array_key_exists($interval, $frequencies)) {
    return $interval;
  }
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Given a database field type, return the correct %-placeholder.
 * Embed the placeholder in a query to be passed to db_query and and pass as an
 * argument to db_query a value of the specified type.
 * This is the backport of the function present in Drupal 6.
 *
 * @param $type
 *   The type of a database field.
 * @return
 *   The placeholder string to embed in a query for that type.
 */
function xmlsitemap_placeholder($type) {
  switch ($type) {
    case 'varchar':
    case 'char':
    case 'text':
    case 'datetime':
      return "'%s'";
    case 'numeric':
      return '%n';
    case 'serial':
    case 'int':
      return '%d';
    case 'float':
      return '%f';
    case 'blob':
      return '%b';
  }
  return 'unsupported type '. $type .'for xmlsitemap_placeholder';
}

/**
 * Generate placeholders for an array of query arguments of a single type.
 * Given a database field type, return correct %-placeholders to
 * embed in a query.
 * This is the backport of a function present in Drupal 6.
 *
 * @param $arguments
 *  An array with at least one element.
 * @param $type
 *   The database type of a field (e.g. 'int', 'text', or 'varchar').
 * @return
 *   An array of placeholders for the passed database type.
 */
 function xmlsitemap_placeholders($arguments, $type = 'int') {
  $placeholder = xmlsitemap_placeholder($type);
  return implode(',', array_fill(0, count($arguments), $placeholder));
}

/**
 * Get an array of site map priority options.
 * @param $option:
 * If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a default
 *   priority exists.
 * - both: Add both the default and exclude options.
 * @return An array of priority options.
 */
function xmlsitemap_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Mark the site map as changed and the cache as needing update.
 * @return None
 */
function xmlsitemap_update_sitemap() {
  if (!variable_get('xmlsitemap_changed', FALSE)) {
    variable_set('xmlsitemap_changed', TRUE);
  }
  if (!variable_get('xmlsitemap_update', FALSE)) {
    variable_set('xmlsitemap_update', TRUE);
  }
  if (variable_get('xmlsitemap_submit', FALSE)) {
    _xmlsitemap_submit_on_exit();
  }
}

/**
 * Modified version of url(). We don't want to do a separate database query for
 * each url, so we pass the alias as an extra parameter.
 * @param $alias: The URL alias. Default is NULL.
 * @return The fully formatted URL
 */
function xmlsitemap_url($path = NULL, $alias = NULL, $query = NULL, $fragment = NULL, $absolute = FALSE) {
  if (isset($fragment)) {
    $fragment = "#$fragment";
  }
  $colonpos = strpos($path, ':');
  if ($colonpos !== FALSE && !preg_match('![/?#]!', substr($path, 0, $colonpos)) && filter_xss_bad_protocol($path, FALSE) == check_plain($path)) {
    if (strpos($path, '#') !== FALSE) {
      list($path, $old_fragment) = explode('#', $path, 2);
      if (isset($old_fragment) && !isset($fragment)) {
        $fragment = "#$old_fragment";
      }
    }
    if (isset($query)) {
      $path .= (strpos($path, '?') !== FALSE ? '&' : '?') . $query;
    }
    return $path . $fragment;
  }
  static $script;
  $script = isset($script) ? $script : strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') === FALSE ? 'index.php' : '';
  $base = ($absolute ? "$GLOBALS[base_url]/" : base_path());
  if (!empty($path) && $path != '<front>') {
    $path = _xmlsitemap_get_path_alias($path, $alias);
    $path = drupal_urlencode($path);
    if (!variable_get('clean_url', FALSE)) {
      if (isset($query)) {
        return $base . $script .'?q='. $path .'&'. $query . $fragment;
      }
      else {
        return $base . $script .'?q='. $path . $fragment;
      }
    }
    else {
      if (isset($query)) {
        return $base . $path .'?'. $query . $fragment;
      }
      else {
        return $base . $path . $fragment;
      }
    }
  }
  else {
    if (isset($query)) {
      return $base . $script .'?'. $query . $fragment;
    }
    else {
      return $base . $fragment;
    }
  }
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Modified version of drupal_get_path_alias() for xmlsitemap_url().
 * @param $path: An internal Drupal path
 * @param $alias: The URL alias. Default is NULL.
 * @return A processed path
 */
function _xmlsitemap_get_path_alias($path, $alias = NULL) {
  $result = $path;
  if (!empty($alias)) {
    $result = $alias;
  }
  if (function_exists('custom_url_rewrite')) {
    $result = custom_url_rewrite('alias', $result, $path);
  }
  if (module_exists('i18n') && i18n_get_lang() == i18n_default_language()) {
    i18n_get_lang_prefix($result, TRUE);
  }
  return $result;
}

/**
 * Return the number of links in the site map.
 */
function _xmlsitemap_link_count() {
  static $link_count;
  if (!isset($link_count)) {
    $link_count = db_result(db_query("SELECT COUNT(*) FROM {xmlsitemap}"));
  }
  return $link_count;
}

/**
 * Display a chunk of the site map.
 * @param $chunk: An integer specifying which chunk of the site map to display
 * @return None
 */
function _xmlsitemap_output_chunk($chunk = 0) {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  $start = $chunk * $chunk_size;
  $links = db_query_range("SELECT * FROM {xmlsitemap} ORDER BY lastmod DESC, changefreq, priority DESC, loc", $start , $chunk_size);
  while ($link = db_fetch_array($links)) {
    print '  <url>'."\n";
    print '    <loc>'. check_url($link['loc']) .'</loc>'."\n";
    if (isset($link['lastmod'])) {
      print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link['lastmod']) .'</lastmod>'."\n";
    }
    if (isset($link['changefreq'])) {
      print '    <changefreq>'. xmlsitemap_frequency($link['changefreq']) .'</changefreq>'."\n";
    }
    if (isset($link['priority']) && $link['priority'] <= 1 && $link['priority'] >= 0) {
      print '    <priority>'. number_format($link['priority'], 1) .'</priority>'."\n";
    }
    print '  </url>'."\n";
  }
  print '</urlset>';
}

/**
 * Generate the site map index.
 * @return A string containing the site map index
 */
function _xmlsitemap_output_index() {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 50000);
  $link_count = _xmlsitemap_link_count();
  for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
    print '  <sitemap>'."\n";
    print '    <loc>'. xmlsitemap_url("sitemap$chunk.xml", NULL, NULL, NULL, TRUE) .'</loc>'."\n";
    if ($chunk < $link_count / $chunk_size) {
      $from = $chunk * $chunk_size;
      if (!empty($chunk_size)) {
        $lastmod = db_result(db_query_range("SELECT lastmod FROM {xmlsitemap} ORDER BY lastmod DESC, loc", $from, $chunk_size));
        if (isset($lastmod) && $lastmod !== FALSE) {
          print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $lastmod) .'</lastmod>'."\n";
        }
      }
    }
    print '  </sitemap>'."\n";
  }
  print '</sitemapindex>';
}

/**
 * Submit the site map to search engines.
 * @return None
 */
function _xmlsitemap_ping() {
  module_invoke_all('xmlsitemap_engines', 'ping');
  variable_set('xmlsitemap_changed', FALSE);
}

/**
 * Schedule a call to _xmlsitemap_ping() to be run on exit. Use this function
 * instead of _xmlsitemap_ping() to avoid a delay in outputting the page to the
 * user.
 * @return TRUE if the function has been called previously, FALSE otherwise.
 */
function _xmlsitemap_submit_on_exit() {
  static $count = 0;
  return ($count++ <> 0);
}

/**
 * Update the site map if content has changed.
 */
function _xmlsitemap_update() {
  db_query("DELETE FROM {xmlsitemap}");
  $fp_priority = variable_get('xmlsitemap_front_page_priority', 1);
  global $user;
  $current_user = $user;
  $user = user_load(array('uid' => 0));
  if (module_exists('i18n')) {
    $language = i18n_get_lang();
    i18n_selection_mode('strict');
    $languages = locale_supported_languages();
    unset($languages['name'][$language]);
    foreach ($languages['name'] as $key => $lang) {
      i18n_get_lang($key);
      $key = $key == i18n_default_language() ? NULL : $key;
      db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", xmlsitemap_url($key, NULL, NULL, NULL, TRUE), time() - 1, 1, $fp_priority);
      module_invoke_all('xmlsitemap_links');
    }
    i18n_get_lang($language);
    $language = $language == i18n_default_language() ? NULL : $language;
    db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", xmlsitemap_url($language, NULL, NULL, NULL, TRUE), time() - 1, 1, $fp_priority);
    i18n_selection_mode('simple');
    module_invoke_all('xmlsitemap_links');
    i18n_selection_mode('reset');
  }
  else {
    db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)", xmlsitemap_url(NULL, NULL, NULL, NULL, TRUE), time() - 1, 1, $fp_priority);
    module_invoke_all('xmlsitemap_links');
  }
  $user = $current_user;
  menu_rebuild();
  cache_clear_all(xmlsitemap_url('sitemap.xml', NULL, NULL, NULL, TRUE), 'cache_page', TRUE);
  variable_set('xmlsitemap_update', FALSE);
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
